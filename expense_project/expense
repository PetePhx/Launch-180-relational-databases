#! /home/user/.rbenv/shims/ruby

require "pg"
require "io/console"

def display_help
  puts <<~HELP

    An expense recording system

    Commands:
    -------------------------------------------------------
    add AMOUNT MEMO [DATE] - record a new expense

    clear - delete all expenses

    list - list all expenses

    delete NUMBER - remove expense with id NUMBER

    search QUERY - list expenses with a matching memo field
    -------------------------------------------------------
    HELP
end

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
  end

  def list_expenses
    result = @connection.exec "SELECT * FROM expenses ORDER BY created_on;"
    display_expenses(result)
  end

  def add_expense(amount, memo)
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, now());"
    @connection.exec_params(sql, [amount, memo])
  end

  def search_expenses(term)
    sql = <<~SQL
    SELECT * FROM expenses
      WHERE memo ILIKE $1
      ORDER BY created_on;
    SQL

    result = @connection.exec_params(sql, ["%#{term}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    sql_select = "SELECT * FROM expenses WHERE id = $1;"
    sql_delete = "DELETE FROM expenses WHERE id = $1;"

    result = @connection.exec_params(sql_select, [id])
    if result.ntuples > 0
      @connection.exec_params(sql_delete, [id])
      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "No expense with an id of #{id} was found."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  private

    def display_expenses(expenses)
      puts
      expenses.each do |row|
        puts [ row["id"].rjust(3),
               row["created_on"].rjust(10),
               row["amount"].rjust(12),
               row["memo"] ].join(' | ')
      end
    end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args[0]
    case command
    when "list"
      @application.list_expenses
    when "add"
      abort "You must provide an amount and memo! @_@" unless args.size >= 3
      @application.add_expense(args[1].to_f, args[2])
    when "search"
      abort "You must provide a search term! o_o" unless args.size >= 2
      @application.search_expenses(args[1])
    when "delete"
      unless args.size >= 2 && args[1].to_i >= 1
       abort "You must provide a positive integer id for an item to be deleted!"
      end
      @application.delete_expense(args[1])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      abort unless STDIN.getch.downcase == 'y'
      @application.delete_all_expenses
    else
      display_help
    end
  end
end

CLI.new.run(ARGV)
